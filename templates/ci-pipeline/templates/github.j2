{% if configuration_mode == 'simple' %}
# Simple GitHub Actions CI for {{ language }}
{% else %}
# Advanced GitHub Actions CI/CD Pipeline for {{ language }}
{% endif %}
# Generated by OpsArtisan

name: CI{% if include_deploy %}/CD{% endif %}

on:
  push:
    branches:
      {% if configuration_mode == 'advanced' and trigger_on %}
      {% for branch in trigger_on.split(',') %}
      - {{ branch.strip() }}
      {% endfor %}
      {% else %}
      - main
      - master
      {% endif %}
  pull_request:
    branches:
      - main
      - master
  {% if configuration_mode == 'advanced' %}
  workflow_dispatch:
  {% endif %}

{% if configuration_mode == 'advanced' %}
concurrency:
  group: ${{ '{{' }} github.workflow {{ '}}' }}-${{ '{{' }} github.ref {{ '}}' }}
  cancel-in-progress: true

{% endif %}
jobs:
  {% if include_lint and configuration_mode == 'advanced' %}
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      {% if language == 'python' %}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '{{ language_version }}'

      - name: Install linting tools
        run: |
          pip install flake8 black pylint mypy

      - name: Run flake8
        run: flake8 .

      - name: Run black
        run: black --check .

      - name: Run pylint
        run: pylint **/*.py || true

      {% elif language == 'node' %}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '{{ language_version }}'

      - name: Install dependencies
        run: {{ package_manager if package_manager else 'npm' }} install

      - name: Run ESLint
        run: {{ package_manager if package_manager else 'npm' }} run lint

      {% elif language == 'go' %}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '{{ language_version }}'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      {% elif language == 'rust' %}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Run rustfmt
        run: cargo fmt --check

      - name: Run clippy
        run: cargo clippy -- -D warnings
      {% endif %}

  {% endif %}
  test:
    name: Test
    runs-on: ubuntu-latest
    {% if include_lint and configuration_mode == 'advanced' %}
    needs: [lint]
    {% endif %}
    {% if language == 'node' and configuration_mode == 'advanced' %}
    strategy:
      matrix:
        node-version: [{{ language_version }}, 18, 20]
    {% endif %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      {% if language == 'python' %}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '{{ language_version }}'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ '{{' }} runner.os {{ '}}' }}-pip-${{ '{{' }} hashFiles('requirements.txt') {{ '}}' }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          {% if include_tests %}pip install pytest pytest-cov{% endif %}

      {% if include_tests %}
      - name: Run tests
        run: {{ test_command if configuration_mode == 'advanced' and test_command else 'pytest' }}{% if configuration_mode == 'advanced' %} --cov --cov-report=xml{% endif %}
      {% endif %}

      {% elif language == 'node' %}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% if configuration_mode == 'advanced' %}${{ '{{' }} matrix.node-version {{ '}}' }}{% else %}'{{ language_version }}'{% endif %}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: {% if package_manager == 'pnpm' %}~/.pnpm-store{% elif package_manager == 'yarn' %}~/.yarn{% else %}~/.npm{% endif %}
          key: ${{ '{{' }} runner.os {{ '}}' }}-node-${{ '{{' }} hashFiles('**/package-lock.json') {{ '}}' }}

      - name: Install dependencies
        run: {{ package_manager if package_manager else 'npm' }} {% if package_manager == 'npm' %}ci{% else %}install --frozen-lockfile{% endif %}

      {% if include_tests %}
      - name: Run tests
        run: {{ package_manager if package_manager else 'npm' }} test
      {% endif %}

      {% elif language == 'go' %}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '{{ language_version }}'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ '{{' }} runner.os {{ '}}' }}-go-${{ '{{' }} hashFiles('**/go.sum') {{ '}}' }}

      - name: Download dependencies
        run: go mod download

      {% if include_tests %}
      - name: Run tests
        run: go test -v {% if configuration_mode == 'advanced' %}-race -coverprofile=coverage.txt -covermode=atomic {% endif %}./...
      {% endif %}

      {% elif language == 'rust' %}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ '{{' }} runner.os {{ '}}' }}-cargo-registry-${{ '{{' }} hashFiles('**/Cargo.lock') {{ '}}' }}

      {% if include_tests %}
      - name: Run tests
        run: cargo test{% if configuration_mode == 'advanced' %} --verbose{% endif %}
      {% endif %}

      {% elif language == 'java' %}
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '{{ language_version }}'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ '{{' }} runner.os {{ '}}' }}-m2-${{ '{{' }} hashFiles('**/pom.xml') {{ '}}' }}

      {% if include_tests %}
      - name: Run tests
        run: mvn test
      {% endif %}

      {% elif language == 'php' %}
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '{{ language_version }}'

      - name: Install dependencies
        run: composer install

      {% if include_tests %}
      - name: Run tests
        run: vendor/bin/phpunit
      {% endif %}

      {% elif language == 'ruby' %}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '{{ language_version }}'
          bundler-cache: true

      {% if include_tests %}
      - name: Run tests
        run: bundle exec rspec
      {% endif %}

      {% elif language == '.net' %}
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '{{ language_version }}'

      {% if include_tests %}
      - name: Run tests
        run: dotnet test
      {% endif %}
      {% endif %}

      {% if configuration_mode == 'advanced' and include_tests %}
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
        if: success()
      {% endif %}

  {% if include_security_scan and configuration_mode == 'advanced' %}
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      {% if language == 'python' %}
      - name: Run Safety check
        run: |
          pip install safety
          safety check || true
      {% elif language == 'node' %}
      - name: Run npm audit
        run: {{ package_manager if package_manager else 'npm' }} audit || true
      {% endif %}

  {% endif %}
  {% if include_docker %}
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    {% if include_security_scan and configuration_mode == 'advanced' %}
    needs: [test, security]
    {% endif %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      {% if configuration_mode == 'advanced' %}
      - name: Log in to {% if docker_registry == 'ghcr' %}GitHub Container Registry{% elif docker_registry == 'gcr' %}Google Container Registry{% elif docker_registry == 'ecr' %}AWS ECR{% else %}Docker Hub{% endif %}
        uses: docker/login-action@v3
        with:
          {% if docker_registry == 'ghcr' %}
          registry: ghcr.io
          username: ${{ '{{' }} github.actor {{ '}}' }}
          password: ${{ '{{' }} secrets.GITHUB_TOKEN {{ '}}' }}
          {% elif docker_registry == 'dockerhub' %}
          username: ${{ '{{' }} secrets.DOCKER_USERNAME {{ '}}' }}
          password: ${{ '{{' }} secrets.DOCKER_PASSWORD {{ '}}' }}
          {% endif %}
      {% endif %}

      - name: Build{% if configuration_mode == 'advanced' %} and push{% endif %} Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          {% if configuration_mode == 'advanced' %}
          push: true
          tags: |
            {% if docker_registry == 'ghcr' %}ghcr.io/${{ '{{' }} github.repository {{ '}}' }}{% else %}{{ docker_image_name }}{% endif %}:latest
            {% if docker_registry == 'ghcr' %}ghcr.io/${{ '{{' }} github.repository {{ '}}' }}{% else %}{{ docker_image_name }}{% endif %}:${{ '{{' }} github.sha {{ '}}' }}
          {% else %}
          push: false
          tags: {{ docker_image_name }}:latest
          {% endif %}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  {% endif %}
  {% if include_deploy %}
  deploy:
    name: Deploy to {{ deploy_environment if configuration_mode == 'advanced' else 'Production' }}
    runs-on: ubuntu-latest
    needs: [{% if include_docker %}build{% else %}test{% endif %}]
    {% if require_approval and configuration_mode == 'advanced' %}
    environment:
      name: {{ deploy_environment }}
      url: https://{{ deploy_environment }}.example.com
    {% endif %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      {% if deploy_target == 'kubernetes' and configuration_mode == 'advanced' %}
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to Kubernetes
        run: |
          echo "${{ '{{' }} secrets.KUBECONFIG {{ '}}' }}" > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl apply -f k8s/
          kubectl rollout status deployment/{{ docker_image_name }}

      {% elif deploy_target == 'heroku' and configuration_mode == 'advanced' %}
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ '{{' }} secrets.HEROKU_API_KEY {{ '}}' }}
          heroku_app_name: ${{ '{{' }} secrets.HEROKU_APP_NAME {{ '}}' }}
          heroku_email: ${{ '{{' }} secrets.HEROKU_EMAIL {{ '}}' }}

      {% elif deploy_target == 'vercel' and configuration_mode == 'advanced' %}
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ '{{' }} secrets.VERCEL_TOKEN {{ '}}' }}
          vercel-org-id: ${{ '{{' }} secrets.VERCEL_ORG_ID {{ '}}' }}
          vercel-project-id: ${{ '{{' }} secrets.VERCEL_PROJECT_ID {{ '}}' }}
          vercel-args: '--prod'

      {% else %}
      - name: Run deployment script
        run: bash scripts/deploy.sh
        env:
          {% if configuration_mode == 'advanced' %}
          ENVIRONMENT: {{ deploy_environment }}
          {% endif %}
          DEPLOY_KEY: ${{ '{{' }} secrets.DEPLOY_KEY {{ '}}' }}
      {% endif %}

  {% endif %}
  {% if include_notifications and configuration_mode == 'advanced' %}
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [{% if include_deploy %}deploy{% elif include_docker %}build{% else %}test{% endif %}]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ '{{' }} job.status {{ '}}' }}
          text: 'CI/CD Pipeline ${{ '{{' }} job.status {{ '}}' }}'
          webhook_url: ${{ '{{' }} secrets.SLACK_WEBHOOK {{ '}}' }}
        if: always()
  {% endif %}
