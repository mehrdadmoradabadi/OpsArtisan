{% if configuration_mode == 'simple' %}
// Simple Jenkins Pipeline for {{ language }}
{% else %}
// Advanced Jenkins CI/CD Pipeline for {{ language }}
{% endif %}
// Generated by OpsArtisan

pipeline {
    agent any

    {% if configuration_mode == 'advanced' %}
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }

    {% endif %}
    environment {
        {% if include_docker %}
        DOCKER_IMAGE = '{{ docker_image_name }}'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        {% endif %}
        {% if language == 'python' %}
        PYTHON_VERSION = '{{ language_version }}'
        {% elif language == 'node' %}
        NODE_VERSION = '{{ language_version }}'
        {% elif language == 'go' %}
        GO_VERSION = '{{ language_version }}'
        {% endif %}
    }

    stages {
        {% if include_lint and configuration_mode == 'advanced' %}
        stage('Lint') {
            steps {
                script {
                    {% if language == 'python' %}
                    sh '''
                        pip install flake8 black
                        flake8 .
                        black --check .
                    '''
                    {% elif language == 'node' %}
                    sh '''
                        {{ package_manager if package_manager else 'npm' }} install
                        {{ package_manager if package_manager else 'npm' }} run lint
                    '''
                    {% elif language == 'go' %}
                    sh '''
                        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
                        golangci-lint run
                    '''
                    {% endif %}
                }
            }
        }

        {% endif %}
        stage('Test') {
            steps {
                script {
                    {% if language == 'python' %}
                    sh '''
                        pip install -r requirements.txt
                        {% if include_tests %}pip install pytest pytest-cov{% endif %}
                        {% if include_tests %}{{ test_command if configuration_mode == 'advanced' and test_command else 'pytest' }}{% if configuration_mode == 'advanced' %} --cov --cov-report=xml{% endif %}{% endif %}
                    '''
                    {% elif language == 'node' %}
                    sh '''
                        {{ package_manager if package_manager else 'npm' }} {% if package_manager == 'npm' %}ci{% else %}install --frozen-lockfile{% endif %}
                        {% if include_tests %}{{ package_manager if package_manager else 'npm' }} test{% endif %}
                    '''
                    {% elif language == 'go' %}
                    sh '''
                        go mod download
                        {% if include_tests %}go test -v ./...{% endif %}
                    '''
                    {% elif language == 'rust' %}
                    sh '''
                        {% if include_tests %}cargo test{% endif %}
                    '''
                    {% endif %}
                }
            }
            {% if configuration_mode == 'advanced' and include_tests %}
            post {
                always {
                    junit 'test-results/**/*.xml'
                    publishHTML([
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
            {% endif %}
        }

        {% if include_security_scan and configuration_mode == 'advanced' %}
        stage('Security Scan') {
            steps {
                script {
                    sh '''
                        docker run --rm -v $(pwd):/src aquasec/trivy fs --exit-code 0 /src
                    '''
                }
            }
        }

        {% endif %}
        {% if include_docker %}
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    '''
                    {% if configuration_mode == 'advanced' %}
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                        '''
                    }
                    {% endif %}
                }
            }
        }

        {% endif %}
        {% if include_deploy %}
        stage('Deploy') {
            {% if require_approval and configuration_mode == 'advanced' %}
            input {
                message "Deploy to {{ deploy_environment }}?"
                ok "Deploy"
            }
            {% endif %}
            steps {
                script {
                    sh 'bash scripts/deploy.sh'
                }
            }
        }
        {% endif %}
    }

    post {
        {% if configuration_mode == 'advanced' %}
        success {
            {% if include_notifications %}
            slackSend(color: 'good', message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
            {% endif %}
            echo 'Pipeline completed successfully!'
        }
        failure {
            {% if include_notifications %}
            slackSend(color: 'danger', message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
            {% endif %}
            echo 'Pipeline failed!'
        }
        {% endif %}
        always {
            cleanWs()
        }
    }
}