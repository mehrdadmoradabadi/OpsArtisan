# Recording rules for {{ job_name }}
# Generated by OpsArtisan

groups:
  - name: {{ job_name }}_recording_rules
    interval: 30s
    rules:
      # Request rate aggregations
      - record: {{ job_name }}:http_requests:rate5m
        expr: |
          rate({{ job_name }}_http_requests_total[5m])

      - record: {{ job_name }}:http_requests:rate1h
        expr: |
          rate({{ job_name }}_http_requests_total[1h])

      # Error rate
      - record: {{ job_name }}:http_errors:rate5m
        expr: |
          rate({{ job_name }}_http_requests_total{status=~"5.."}[5m])

      # Latency percentiles
      - record: {{ job_name }}:http_request_duration:p50
        expr: |
          histogram_quantile(0.50,
            rate({{ job_name }}_http_request_duration_seconds_bucket[5m])
          )

      - record: {{ job_name }}:http_request_duration:p95
        expr: |
          histogram_quantile(0.95,
            rate({{ job_name }}_http_request_duration_seconds_bucket[5m])
          )

      - record: {{ job_name }}:http_request_duration:p99
        expr: |
          histogram_quantile(0.99,
            rate({{ job_name }}_http_request_duration_seconds_bucket[5m])
          )

      # Success rate
      - record: {{ job_name }}:http_success_rate:rate5m
        expr: |
          sum(rate({{ job_name }}_http_requests_total{status!~"5.."}[5m])) /
          sum(rate({{ job_name }}_http_requests_total[5m]))

      # Availability (uptime)
      - record: {{ job_name }}:up:avg
        expr: |
          avg_over_time(up{job="{{ job_name }}"}[5m])

      # Resource usage
      - record: {{ job_name }}:cpu_usage:rate5m
        expr: |
          rate(process_cpu_seconds_total{job="{{ job_name }}"}[5m])

      - record: {{ job_name }}:memory_usage:bytes
        expr: |
          process_resident_memory_bytes{job="{{ job_name }}"}
