#!/bin/bash
#
# Setup Let's Encrypt SSL certificate for {{ server_name }}
# Generated by OpsArtisan
#

set -euo pipefail

if [ "$EUID" -ne 0 ]; then
    echo "ERROR: This script must be run as root"
    exit 1
fi

SERVER_TYPE="{{ server_type }}"
SERVER_NAME="{{ server_name }}"
EMAIL="${1:-admin@{{ server_name }}}"

echo "==> Setting up Let's Encrypt certificate for ${SERVER_NAME}"
echo "Email: ${EMAIL}"

# Install certbot
if ! command -v certbot &> /dev/null; then
    echo "==> Installing certbot"
    if [ -f /etc/debian_version ]; then
        apt-get update
        apt-get install -y certbot python3-certbot-{{ server_type }}
    elif [ -f /etc/redhat-release ]; then
        yum install -y certbot python3-certbot-{{ server_type }}
    else
        echo "ERROR: Unsupported distribution"
        exit 1
    fi
fi

# Create webroot directory for challenges
mkdir -p /var/www/letsencrypt/.well-known/acme-challenge/
chmod -R 755 /var/www/letsencrypt

echo "==> Obtaining certificate"

if [ "${SERVER_TYPE}" == "nginx" ]; then
    certbot certonly \
        --nginx \
        -d {{ server_name }} \
        {% if server_aliases and configuration_mode == 'advanced' %}
        {% for alias in server_aliases.split(',') %}
        -d {{ alias.strip() }} \
        {% endfor %}
        {% endif %}
        --email "${EMAIL}" \
        --agree-tos \
        --non-interactive

elif [ "${SERVER_TYPE}" == "apache" ]; then
    certbot certonly \
        --apache \
        -d {{ server_name }} \
        {% if server_aliases and configuration_mode == 'advanced' %}
        {% for alias in server_aliases.split(',') %}
        -d {{ alias.strip() }} \
        {% endfor %}
        {% endif %}
        --email "${EMAIL}" \
        --agree-tos \
        --non-interactive
fi

if [ $? -eq 0 ]; then
    echo ""
    echo "==> Certificate obtained successfully!"
    echo ""
    echo "Certificate: /etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    echo "Private Key: /etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    echo ""
    echo "Auto-renewal is configured via systemd timer"
    echo "Check status: systemctl status certbot.timer"
    echo ""
    echo "Next steps:"
    echo "1. Update your {{ server_type }} config to use these certificates"
    echo "2. Reload {{ server_type }}: systemctl reload {{ server_type }}"
    echo "3. Test SSL: https://www.ssllabs.com/ssltest/analyze.html?d={{ server_name }}"
else
    echo "ERROR: Failed to obtain certificate"
    exit 1
fi
