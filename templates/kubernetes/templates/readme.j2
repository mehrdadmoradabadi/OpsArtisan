# {{ app_name }} - Kubernetes Deployment

Kubernetes manifests for deploying {{ app_name }} application.

## Structure

```
k8s/
├── namespace.yaml          # Namespace definition
├── deployment.yaml         # Application deployment
├── service.yaml           # Service exposure
├── configmap.yaml         # Configuration data
├── secret.yaml            # Sensitive data (gitignored)
├── service_account.yaml   # Service account
{% if ingress_enabled %}├── ingress.yaml           # Ingress routing
{% endif %}{% if autoscaling_enabled %}├── hpa.yaml               # Horizontal Pod Autoscaler
{% endif %}{% if monitoring_enabled %}├── servicemonitor.yaml    # Prometheus monitoring
{% endif %}├── pdb.yaml               # Pod Disruption Budget
├── network_policy.yaml    # Network policies
├── kustomization.yaml     # Kustomize configuration
└── README.md
```

## Prerequisites

- kubectl configured for your cluster
- Namespace `{{ namespace }}` (created automatically)
{% if ingress_enabled %}- Ingress controller (nginx) installed
- cert-manager for TLS certificates
{% endif %}{% if monitoring_enabled %}- Prometheus Operator for monitoring
{% endif %}

## Quick Start

### 1. Apply all manifests

```bash
kubectl apply -k k8s/
```

### 2. Check deployment status

```bash
kubectl get pods -n {{ namespace }}
kubectl get svc -n {{ namespace }}
{% if ingress_enabled %}kubectl get ingress -n {{ namespace }}
{% endif %}```

### 3. View logs

```bash
kubectl logs -f deployment/{{ app_name }} -n {{ namespace }}
```

### 4. Access the application

{% if ingress_enabled %}```bash
# Via ingress
curl https://{{ domain }}
```
{% else %}```bash
# Port forward
kubectl port-forward svc/{{ app_name }} {{ port }}:{{ port }} -n {{ namespace }}
curl http://localhost:{{ port }}
```
{% endif %}

## Configuration

### Environment Variables

Edit `configmap.yaml` to modify application configuration:

```yaml
data:
  environment: "production"
  log_level: "info"
```

### Secrets

Edit `secret.yaml` and apply:

```bash
kubectl apply -f k8s/secret.yaml
```

**⚠️ Never commit secrets to git!**

### Scaling

```bash
# Manual scaling
kubectl scale deployment {{ app_name }} --replicas=5 -n {{ namespace }}
{% if autoscaling_enabled %}
# HPA is enabled - automatic scaling based on CPU/Memory
kubectl get hpa -n {{ namespace }}
{% endif %}```

## Maintenance

### Update image

```bash
kubectl set image deployment/{{ app_name }} {{ app_name }}={{ image_name }} -n {{ namespace }}
```

### Rollback

```bash
kubectl rollout undo deployment/{{ app_name }} -n {{ namespace }}
```

### Check rollout status

```bash
kubectl rollout status deployment/{{ app_name }} -n {{ namespace }}
```

## Monitoring

{% if monitoring_enabled %}Prometheus metrics available at:
- Endpoint: `/metrics`
- ServiceMonitor: `{{ app_name }}-metrics`

```bash
kubectl get servicemonitor -n {{ namespace }}
```
{% else %}To enable monitoring, set `monitoring_enabled: true` in your configuration.
{% endif %}

## Network Policies

Network policies are enabled to:
- Allow ingress on port {{ port }} from same namespace
- Allow egress to internet (80/443)
- Allow DNS queries to kube-system

Modify `network_policy.yaml` to adjust rules.

## Troubleshooting

### Pod not starting

```bash
kubectl describe pod -l app={{ app_name }} -n {{ namespace }}
kubectl logs -l app={{ app_name }} -n {{ namespace }}
```

### Service not reachable

```bash
kubectl get endpoints {{ app_name }} -n {{ namespace }}
kubectl get svc {{ app_name }} -n {{ namespace }}
```

### Ingress issues

```bash
kubectl describe ingress {{ app_name }}-ingress -n {{ namespace }}
kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller
```

## Cleanup

```bash
kubectl delete -k k8s/
```

Or delete namespace (removes everything):

```bash
kubectl delete namespace {{ namespace }}
```

## Configuration

**Replicas:** {{ replicas }}
**CPU Limit:** {{ resources_limits_cpu }}
**Memory Limit:** {{ resources_limits_memory }}
**Port:** {{ port }}
{% if ingress_enabled %}**Domain:** {{ domain }}
{% endif %}{% if autoscaling_enabled %}**Autoscaling:** Enabled ({{ replicas }}-{{ replicas * 3 }} pods)
{% endif %}{% if monitoring_enabled %}**Monitoring:** Enabled
{% endif %}

---
Generated by OpsArtisan