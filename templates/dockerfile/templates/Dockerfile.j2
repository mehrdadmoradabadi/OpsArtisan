# Dockerfile for {{ app_name }}
# Runtime: {{ runtime }} {{ runtime_version }}
# Generated by OpsArtisan

{% if runtime == "node" %}
{% if multi_stage %}
# Build stage
FROM node:{{ runtime_version }}-alpine AS builder

WORKDIR /build

# Copy package files
COPY package*.json ./
{% if package_manager == "yarn" %}
COPY yarn.lock ./
{% elif package_manager == "pnpm" %}
COPY pnpm-lock.yaml ./
{% endif %}

# Install dependencies
{% if package_manager == "npm" %}
RUN npm ci --only=production
{% elif package_manager == "yarn" %}
RUN yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" %}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{% endif %}

# Copy application code
COPY . .

# Build application if needed
{% if package_manager == "npm" %}
RUN npm run build 2>/dev/null || echo "No build script found"
{% elif package_manager == "yarn" %}
RUN yarn build 2>/dev/null || echo "No build script found"
{% elif package_manager == "pnpm" %}
RUN pnpm build 2>/dev/null || echo "No build script found"
{% endif %}

# Production stage
FROM node:{{ runtime_version }}-alpine

WORKDIR /app

# Copy dependencies and built application
COPY --from=builder /build/node_modules ./node_modules
COPY --from=builder /build/package*.json ./
COPY --from=builder /build/dist ./dist 2>/dev/null || COPY --from=builder /build/build ./build 2>/dev/null || COPY --from=builder /build/*.js ./

{% else %}
# Single stage build
FROM node:{{ runtime_version }}-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
{% if package_manager == "yarn" %}
COPY yarn.lock ./
{% elif package_manager == "pnpm" %}
COPY pnpm-lock.yaml ./
{% endif %}

# Install dependencies
{% if package_manager == "npm" %}
RUN npm ci --only=production
{% elif package_manager == "yarn" %}
RUN yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" %}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{% endif %}

# Copy application code
COPY . .
{% endif %}

{% elif runtime == "python" %}
{% if multi_stage %}
# Build stage
FROM python:{{ runtime_version }}-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --user --no-cache-dir -r requirements.txt

# Production stage
FROM python:{{ runtime_version }}-slim

WORKDIR /app

# Copy Python dependencies
COPY --from=builder /root/.local /root/.local

# Copy application code
COPY . .

{% else %}
# Single stage build
FROM python:{{ runtime_version }}-slim

WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .
{% endif %}

{% elif runtime == "go" %}
{% if multi_stage %}
# Build stage
FROM golang:{{ runtime_version }}-alpine AS builder

WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o {{ app_name }} .

# Production stage
FROM alpine:latest

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/{{ app_name }} .

{% else %}
# Single stage build
FROM golang:{{ runtime_version }}-alpine

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN go build -o {{ app_name }} .
{% endif %}

{% elif runtime == "rust" %}
{% if multi_stage %}
# Build stage
FROM rust:{{ runtime_version }}-slim AS builder

WORKDIR /build

# Copy manifest files
COPY Cargo.toml Cargo.lock ./

# Create dummy main to cache dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release
RUN rm -rf src

# Copy source code
COPY . .

# Build the application
RUN cargo build --release

# Production stage
FROM debian:bookworm-slim

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/target/release/{{ app_name }} .

{% else %}
# Single stage build
FROM rust:{{ runtime_version }}-slim

WORKDIR /app

# Copy manifest files
COPY Cargo.toml Cargo.lock ./

# Copy source code
COPY . .

# Build the application
RUN cargo build --release

# Use the built binary
RUN cp target/release/{{ app_name }} .
{% endif %}

{% elif runtime == "java" %}
{% if multi_stage %}
# Build stage
FROM maven:3.9-eclipse-temurin-{{ runtime_version }} AS builder

WORKDIR /build

# Copy pom.xml
COPY pom.xml .

# Download dependencies
RUN mvn dependency:go-offline

# Copy source code
COPY src ./src

# Build the application
RUN mvn package -DskipTests

# Production stage
FROM eclipse-temurin:{{ runtime_version }}-jre-alpine

WORKDIR /app

# Copy JAR from builder
COPY --from=builder /build/target/*.jar app.jar

{% else %}
# Single stage build
FROM eclipse-temurin:{{ runtime_version }}-jdk-alpine

WORKDIR /app

# Copy pom.xml
COPY pom.xml .

# Download dependencies (requires Maven)
RUN apk add --no-cache maven && mvn dependency:go-offline

# Copy source code
COPY src ./src

# Build the application
RUN mvn package -DskipTests && cp target/*.jar app.jar
{% endif %}
{% endif %}

{% if non_root %}
# Create non-root user
RUN addgroup -g 1001 -S {{ app_name }} && \
    adduser -u 1001 -S {{ app_name }} -G {{ app_name }}

# Change ownership
RUN chown -R {{ app_name }}:{{ app_name }} /app

# Switch to non-root user
USER {{ app_name }}
{% endif %}

# Expose port
EXPOSE {{ port }}

{% if health_check %}
# Health check
{% if runtime == "node" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:{{ port }}/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"
{% elif runtime == "python" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:{{ port }}/health')" || exit 1
{% else %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:{{ port }}/health || exit 1
{% endif %}
{% endif %}

# Start the application
{% if runtime == "node" %}
CMD ["node", "{% if multi_stage %}dist/index.js{% else %}index.js{% endif %}"]
{% elif runtime == "python" %}
CMD ["python", "main.py"]
{% elif runtime == "go" %}
CMD ["./{{ app_name }}"]
{% elif runtime == "rust" %}
CMD ["./{{ app_name }}"]
{% elif runtime == "java" %}
CMD ["java", "-jar", "app.jar"]
{% endif %}