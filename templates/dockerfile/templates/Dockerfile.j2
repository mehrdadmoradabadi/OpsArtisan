# syntax=docker/dockerfile:1.4
# Dockerfile for {{ app_name }}
# Runtime: {{ runtime }} {{ runtime_version }}
{% if configuration_mode == 'simple' %}
# Configuration: Simple (basic setup)
{% else %}
# Configuration: Advanced (full features)
{% endif %}
# Generated by OpsArtisan

{% if labels and configuration_mode == 'advanced' %}
# OCI Labels
LABEL org.opencontainers.image.title="{{ app_name }}"
LABEL org.opencontainers.image.description="Container image for {{ app_name }}"
LABEL org.opencontainers.image.vendor="OpsArtisan"
LABEL org.opencontainers.image.version="1.0.0"
{% endif %}

{% if build_args and configuration_mode == 'advanced' %}
# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0
{% endif %}

{% if runtime == "node" %}
{% if multi_stage or configuration_mode == 'advanced' %}
# ============================================
# Build stage
# ============================================
FROM node:{{ runtime_version }}-alpine AS builder

WORKDIR /build

# Install build dependencies
{% if optimization_level == "aggressive" and configuration_mode == 'advanced' %}
RUN apk add --no-cache python3 make g++
{% endif %}

# Copy package files
COPY package*.json ./
{% if package_manager == "yarn" and configuration_mode == 'advanced' %}
COPY yarn.lock ./
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
COPY pnpm-lock.yaml ./
{% endif %}

# Install dependencies with cache mount
{% if cache_optimization and configuration_mode == 'advanced' %}
RUN --mount=type=cache,target=/root/.npm \
{% if package_manager == "npm" or configuration_mode == 'simple' %}
    npm ci --only=production
{% elif package_manager == "yarn" and configuration_mode == 'advanced' %}
    yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
    npm install -g pnpm && pnpm install --frozen-lockfile --prod
{% endif %}
{% else %}
{% if package_manager == "npm" or configuration_mode == 'simple' %}
RUN npm ci --only=production
{% elif package_manager == "yarn" and configuration_mode == 'advanced' %}
RUN yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{% endif %}
{% endif %}

# Copy application code
COPY . .

# Build application if needed
{% if package_manager == "npm" or configuration_mode == 'simple' %}
RUN npm run build 2>/dev/null || echo "No build script found"
{% elif package_manager == "yarn" and configuration_mode == 'advanced' %}
RUN yarn build 2>/dev/null || echo "No build script found"
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
RUN pnpm build 2>/dev/null || echo "No build script found"
{% endif %}

# Remove dev dependencies
RUN rm -rf node_modules && \
{% if package_manager == "npm" or configuration_mode == 'simple' %}
    npm ci --only=production
{% elif package_manager == "yarn" and configuration_mode == 'advanced' %}
    yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
    pnpm install --frozen-lockfile --prod
{% endif %}

# ============================================
# Production stage
# ============================================
FROM node:{{ runtime_version }}-alpine

{% if include_ca_certificates and configuration_mode == 'advanced' %}
# Install ca-certificates
RUN apk add --no-cache ca-certificates
{% endif %}

WORKDIR /app

# Copy dependencies and built application
COPY --from=builder /build/node_modules ./node_modules
COPY --from=builder /build/package*.json ./
COPY --from=builder /build/dist ./dist 2>/dev/null || \
  COPY --from=builder /build/build ./build 2>/dev/null || \
  COPY --from=builder /build/*.js ./

{% else %}
# ============================================
# Single stage build
# ============================================
FROM node:{{ runtime_version }}-alpine

{% if include_ca_certificates and configuration_mode == 'advanced' %}
RUN apk add --no-cache ca-certificates
{% endif %}

WORKDIR /app

# Copy package files
COPY package*.json ./
{% if package_manager == "yarn" and configuration_mode == 'advanced' %}
COPY yarn.lock ./
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
COPY pnpm-lock.yaml ./
{% endif %}

# Install dependencies
{% if package_manager == "npm" or configuration_mode == 'simple' %}
RUN npm ci --only=production
{% elif package_manager == "yarn" and configuration_mode == 'advanced' %}
RUN yarn install --frozen-lockfile --production
{% elif package_manager == "pnpm" and configuration_mode == 'advanced' %}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{% endif %}

# Copy application code
COPY . .
{% endif %}

{% elif runtime == "python" %}
{% if multi_stage or configuration_mode == 'advanced' %}
# ============================================
# Build stage
# ============================================
FROM python:{{ runtime_version }}-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    make \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies to user directory
{% if cache_optimization and configuration_mode == 'advanced' %}
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --user --no-cache-dir -r requirements.txt
{% else %}
RUN pip install --user --no-cache-dir -r requirements.txt
{% endif %}

# ============================================
# Production stage
# ============================================
FROM python:{{ runtime_version }}-slim

{% if include_ca_certificates and configuration_mode == 'advanced' %}
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*
{% endif %}

WORKDIR /app

# Copy Python dependencies
COPY --from=builder /root/.local /root/.local

# Make sure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# Copy application code
COPY . .

{% else %}
# ============================================
# Single stage build
# ============================================
FROM python:{{ runtime_version }}-slim

{% if include_ca_certificates %}
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*
{% endif %}

WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .
{% endif %}

{% elif runtime == "go" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM golang:{{ runtime_version }}-alpine AS builder

WORKDIR /build

# Install build dependencies
{% if optimization_level == "aggressive" %}
RUN apk add --no-cache git ca-certificates tzdata
{% endif %}

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies with cache
{% if cache_optimization %}
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download
{% else %}
RUN go mod download
{% endif %}

# Copy source code
COPY . .

# Build the application
{% if optimization_level == "aggressive" %}
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o {{ app_name }} .
{% else %}
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o {{ app_name }} .
{% endif %}

# ============================================
# Production stage
# ============================================
{% if distroless %}
FROM gcr.io/distroless/static-debian11:nonroot
{% else %}
FROM alpine:latest

{% if include_ca_certificates %}
RUN apk add --no-cache ca-certificates tzdata
{% endif %}
{% endif %}

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/{{ app_name }} .

{% else %}
# ============================================
# Single stage build
# ============================================
FROM golang:{{ runtime_version }}-alpine

{% if include_ca_certificates %}
RUN apk add --no-cache ca-certificates
{% endif %}

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN go build -o {{ app_name }} .
{% endif %}

{% elif runtime == "rust" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM rust:{{ runtime_version }}-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy manifest files
COPY Cargo.toml Cargo.lock ./

# Create dummy main to cache dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs
{% if cache_optimization %}
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    cargo build --release
{% else %}
RUN cargo build --release
{% endif %}
RUN rm -rf src

# Copy source code
COPY . .

# Build the application
{% if cache_optimization %}
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/build/target \
    cargo build --release && \
    cp target/release/{{ app_name }} /{{ app_name }}
{% else %}
RUN cargo build --release
{% endif %}

# ============================================
# Production stage
# ============================================
{% if distroless %}
FROM gcr.io/distroless/cc-debian11:nonroot

COPY --from=builder /{{ app_name }} /app/{{ app_name }}
{% else %}
FROM debian:bookworm-slim

{% if include_ca_certificates %}
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*
{% endif %}

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/target/release/{{ app_name }} .
{% endif %}

{% else %}
# ============================================
# Single stage build
# ============================================
FROM rust:{{ runtime_version }}-slim

{% if include_ca_certificates %}
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

WORKDIR /app

# Copy manifest files
COPY Cargo.toml Cargo.lock ./

# Copy source code
COPY . .

# Build the application
RUN cargo build --release && \
    cp target/release/{{ app_name }} .
{% endif %}

{% elif runtime == "java" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM maven:3.9-eclipse-temurin-{{ runtime_version }} AS builder

WORKDIR /build

# Copy pom.xml
COPY pom.xml .

# Download dependencies
{% if cache_optimization %}
RUN --mount=type=cache,target=/root/.m2 \
    mvn dependency:go-offline
{% else %}
RUN mvn dependency:go-offline
{% endif %}

# Copy source code
COPY src ./src

# Build the application
{% if cache_optimization %}
RUN --mount=type=cache,target=/root/.m2 \
    mvn package -DskipTests
{% else %}
RUN mvn package -DskipTests
{% endif %}

# ============================================
# Production stage
# ============================================
{% if distroless %}
FROM gcr.io/distroless/java{{ runtime_version }}-debian11:nonroot

COPY --from=builder /build/target/*.jar /app/app.jar
{% else %}
FROM eclipse-temurin:{{ runtime_version }}-jre-alpine

{% if include_ca_certificates %}
RUN apk add --no-cache ca-certificates
{% endif %}

WORKDIR /app

# Copy JAR from builder
COPY --from=builder /build/target/*.jar app.jar
{% endif %}

{% else %}
# ============================================
# Single stage build
# ============================================
FROM eclipse-temurin:{{ runtime_version }}-jdk-alpine

{% if include_ca_certificates %}
RUN apk add --no-cache ca-certificates maven
{% endif %}

WORKDIR /app

# Copy pom.xml
COPY pom.xml .

# Download dependencies
RUN mvn dependency:go-offline

# Copy source code
COPY src ./src

# Build the application
RUN mvn package -DskipTests && cp target/*.jar app.jar
{% endif %}

{% elif runtime == "php" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM php:{{ runtime_version }}-cli AS builder

WORKDIR /build

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Copy application code
COPY . .

# ============================================
# Production stage
# ============================================
FROM php:{{ runtime_version }}-fpm-alpine

WORKDIR /app

# Copy dependencies and application
COPY --from=builder /build/vendor ./vendor
COPY --from=builder /build .

{% else %}
FROM php:{{ runtime_version }}-fpm-alpine

WORKDIR /app

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies
RUN composer install --no-dev --optimize-autoloader

# Copy application code
COPY . .
{% endif %}

{% elif runtime == "ruby" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM ruby:{{ runtime_version }}-alpine AS builder

WORKDIR /build

# Install build dependencies
RUN apk add --no-cache build-base

# Copy Gemfile
COPY Gemfile Gemfile.lock ./

# Install gems
RUN bundle config set --local deployment 'true' && \
    bundle config set --local without 'development test' && \
    bundle install

# Copy application code
COPY . .

# ============================================
# Production stage
# ============================================
FROM ruby:{{ runtime_version }}-alpine

WORKDIR /app

# Copy gems and application
COPY --from=builder /build/vendor/bundle ./vendor/bundle
COPY --from=builder /build .

{% else %}
FROM ruby:{{ runtime_version }}-alpine

WORKDIR /app

# Copy Gemfile
COPY Gemfile Gemfile.lock ./

# Install gems
RUN bundle install --deployment --without development test

# Copy application code
COPY . .
{% endif %}

{% elif runtime == ".net" %}
{% if multi_stage %}
# ============================================
# Build stage
# ============================================
FROM mcr.microsoft.com/dotnet/sdk:{{ runtime_version }} AS builder

WORKDIR /build

# Copy csproj and restore
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . ./
RUN dotnet publish -c Release -o out

# ============================================
# Production stage
# ============================================
FROM mcr.microsoft.com/dotnet/aspnet:{{ runtime_version }}

WORKDIR /app

# Copy published app
COPY --from=builder /build/out .

{% else %}
FROM mcr.microsoft.com/dotnet/sdk:{{ runtime_version }}

WORKDIR /app

# Copy csproj and restore
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . ./
RUN dotnet publish -c Release -o out

WORKDIR /app/out
{% endif %}
{% endif %}

{% if non_root and not distroless and (configuration_mode == 'advanced' or non_root) %}
# ============================================
# Create non-root user
# ============================================
{% if runtime in ["node", "go", "rust"] %}
RUN addgroup -g 1001 -S {{ app_name }} && \
    adduser -u 1001 -S {{ app_name }} -G {{ app_name }}
{% else %}
RUN groupadd -r {{ app_name }} -g 1001 && \
    useradd -r -g {{ app_name }} -u 1001 {{ app_name }}
{% endif %}

# Change ownership
RUN chown -R {{ app_name }}:{{ app_name }} /app

# Switch to non-root user
USER {{ app_name }}
{% endif %}

# Set timezone
{% if configuration_mode == 'advanced' %}
ENV TZ={{ timezone }}
{% else %}
ENV TZ=UTC
{% endif %}

# Expose port
EXPOSE {{ port }}

{% if health_check or configuration_mode == 'simple' %}
# ============================================
# Health check
# ============================================
{% if runtime == "node" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:{{ port }}{% if configuration_mode == 'advanced' %}{{ health_endpoint }}{% else %}/health{% endif %}', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"
{% elif runtime == "python" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:{{ port }}{% if configuration_mode == 'advanced' %}{{ health_endpoint }}{% else %}/health{% endif %}')" || exit 1
{% elif runtime in ["go", "rust", "java", ".net"] %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:{{ port }}{% if configuration_mode == 'advanced' %}{{ health_endpoint }}{% else %}/health{% endif %} || exit 1
{% elif runtime == "php" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD php -r "file_get_contents('http://localhost:{{ port }}{% if configuration_mode == 'advanced' %}{{ health_endpoint }}{% else %}/health{% endif %}');" || exit 1
{% elif runtime == "ruby" %}
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD ruby -r net/http -e "Net::HTTP.get(URI('http://localhost:{{ port }}{% if configuration_mode == 'advanced' %}{{ health_endpoint }}{% else %}/health{% endif %}'))" || exit 1
{% endif %}
{% endif %}

# Copy entrypoint script
COPY docker/entrypoint.sh /entrypoint.sh
{% if not non_root %}
RUN chmod +x /entrypoint.sh
{% endif %}

# ============================================
# Start the application
# ============================================
ENTRYPOINT ["/entrypoint.sh"]

{% if runtime == "node" %}
CMD ["node", "{% if multi_stage %}dist/index.js{% else %}index.js{% endif %}"]
{% elif runtime == "python" %}
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "{{ port }}"]
{% elif runtime == "go" %}
CMD ["./{{ app_name }}"]
{% elif runtime == "rust" %}
CMD ["./{{ app_name }}"]
{% elif runtime == "java" %}
CMD ["java", "-jar", "{% if distroless %}/app/{% endif %}app.jar"]
{% elif runtime == "php" %}
CMD ["php-fpm"]
{% elif runtime == "ruby" %}
CMD ["bundle", "exec", "ruby", "app.rb"]
{% elif runtime == ".net" %}
CMD ["dotnet", "{{ app_name }}.dll"]
{% endif %}