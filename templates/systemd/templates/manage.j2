#!/bin/bash
#
# Management script for {{ service_name }} service
# Generated by OpsArtisan
#

set -euo pipefail

SERVICE_NAME="{{ service_name }}"
{% if create_timer and configuration_mode == 'advanced' %}
TIMER_NAME="${SERVICE_NAME}.timer"
{% endif %}
{% if enable_socket_activation and configuration_mode == 'advanced' %}
SOCKET_NAME="${SERVICE_NAME}.socket"
{% endif %}

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}ERROR: This operation requires root privileges${NC}"
        echo "Please run with sudo: sudo $0 $1"
        exit 1
    fi
}

# Show status
status() {
    echo -e "${BLUE}==> Service Status${NC}"
    echo ""
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl status "${SERVICE_NAME}" --no-pager || true
    {% endif %}
}

# Start service
start() {
    check_root "start"
    echo -e "${BLUE}==> Starting ${SERVICE_NAME}${NC}"
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl start "${TIMER_NAME}"
    {% elif enable_socket_activation and configuration_mode == 'advanced' %}
    systemctl start "${SOCKET_NAME}"
    {% else %}
    systemctl start "${SERVICE_NAME}"
    {% endif %}
    echo -e "${GREEN}✓ Started${NC}"
    status
}

# Stop service
stop() {
    check_root "stop"
    echo -e "${BLUE}==> Stopping ${SERVICE_NAME}${NC}"
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl stop "${TIMER_NAME}"
    systemctl stop "${SERVICE_NAME}" 2>/dev/null || true
    {% elif enable_socket_activation and configuration_mode == 'advanced' %}
    systemctl stop "${SOCKET_NAME}"
    systemctl stop "${SERVICE_NAME}" 2>/dev/null || true
    {% else %}
    systemctl stop "${SERVICE_NAME}"
    {% endif %}
    echo -e "${GREEN}✓ Stopped${NC}"
}

# Restart service
restart() {
    check_root "restart"
    echo -e "${BLUE}==> Restarting ${SERVICE_NAME}${NC}"
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl restart "${TIMER_NAME}"
    {% elif enable_socket_activation and configuration_mode == 'advanced' %}
    systemctl restart "${SOCKET_NAME}"
    {% else %}
    systemctl restart "${SERVICE_NAME}"
    {% endif %}
    echo -e "${GREEN}✓ Restarted${NC}"
    status
}

# Reload service configuration
reload() {
    check_root "reload"
    {% if exec_reload and configuration_mode == 'advanced' %}
    echo -e "${BLUE}==> Reloading ${SERVICE_NAME} configuration${NC}"
    systemctl reload "${SERVICE_NAME}"
    echo -e "${GREEN}✓ Reloaded${NC}"
    {% else %}
    echo -e "${YELLOW}Reload not configured, performing restart instead${NC}"
    restart
    {% endif %}
}

# Enable service
enable() {
    check_root "enable"
    echo -e "${BLUE}==> Enabling ${SERVICE_NAME}${NC}"
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl enable "${TIMER_NAME}"
    {% elif enable_socket_activation and configuration_mode == 'advanced' %}
    systemctl enable "${SOCKET_NAME}"
    {% else %}
    systemctl enable "${SERVICE_NAME}"
    {% endif %}
    echo -e "${GREEN}✓ Enabled (will start on boot)${NC}"
}

# Disable service
disable() {
    check_root "disable"
    echo -e "${BLUE}==> Disabling ${SERVICE_NAME}${NC}"
    {% if create_timer and configuration_mode == 'advanced' %}
    systemctl disable "${TIMER_NAME}"
    {% elif enable_socket_activation and configuration_mode == 'advanced' %}
    systemctl disable "${SOCKET_NAME}"
    {% else %}
    systemctl disable "${SERVICE_NAME}"
    {% endif %}
    echo -e "${GREEN}✓ Disabled (will not start on boot)${NC}"
}

# Show logs
logs() {
    echo -e "${BLUE}==> Showing logs for ${SERVICE_NAME}${NC}"
    echo "Press Ctrl+C to exit"
    echo ""
    journalctl -u "${SERVICE_NAME}" -f
}

# Show recent logs
logs_recent() {
    echo -e "${BLUE}==> Recent logs for ${SERVICE_NAME}${NC}"
    journalctl -u "${SERVICE_NAME}" -n 50 --no-pager
}

# Validate configuration
validate() {
    echo -e "${BLUE}==> Validating service configuration${NC}"
    systemd-analyze verify "/etc/systemd/system/${SERVICE_NAME}.service" && \
        echo -e "${GREEN}✓ Service configuration is valid${NC}" || \
        echo -e "${RED}✗ Service configuration has errors${NC}"
}

# Show help
show_help() {
    cat << EOF
${BLUE}{{ service_name }} Service Management${NC}

Usage: $0 <command>

Commands:
  status      Show service status
  start       Start the service
  stop        Stop the service
  restart     Restart the service
  reload      Reload configuration without restart
  enable      Enable service (start on boot)
  disable     Disable service (don't start on boot)
  logs        Show live logs (tail -f)
  recent      Show recent logs
  validate    Validate service configuration
  help        Show this help message

Examples:
  $0 status
  sudo $0 start
  sudo $0 enable
  $0 logs

EOF
}

# Main
case "${1:-help}" in
    status)
        status
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    reload)
        reload
        ;;
    enable)
        enable
        ;;
    disable)
        disable
        ;;
    logs)
        logs
        ;;
    recent)
        logs_recent
        ;;
    validate)
        validate
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
