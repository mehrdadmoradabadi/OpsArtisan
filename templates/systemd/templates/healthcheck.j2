{% if configuration_mode == 'advanced' %}
#!/bin/bash
#
# Health check script for {{ service_name }} service
# Generated by OpsArtisan
#

set -euo pipefail

SERVICE_NAME="{{ service_name }}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Exit codes
EXIT_OK=0
EXIT_WARNING=1
EXIT_CRITICAL=2
EXIT_UNKNOWN=3

# Check if service is running
check_running() {
    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}✓ Service is running${NC}"
        return 0
    else
        echo -e "${RED}✗ Service is not running${NC}"
        return 1
    fi
}

# Check if service is enabled
check_enabled() {
    if systemctl is-enabled --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}✓ Service is enabled${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠ Service is not enabled (won't start on boot)${NC}"
        return 1
    fi
}

# Check service failed state
check_failed() {
    if systemctl is-failed --quiet "${SERVICE_NAME}"; then
        echo -e "${RED}✗ Service is in failed state${NC}"
        return 1
    else
        echo -e "${GREEN}✓ Service is not in failed state${NC}"
        return 0
    fi
}

# Check restart count
check_restarts() {
    local restarts=$(systemctl show "${SERVICE_NAME}" -p NRestarts --value)
    if [ "${restarts}" -gt 10 ]; then
        echo -e "${YELLOW}⚠ Service has restarted ${restarts} times${NC}"
        return 1
    else
        echo -e "${GREEN}✓ Restart count: ${restarts}${NC}"
        return 0
    fi
}

# Check memory usage
check_memory() {
    {% if resource_limits %}
    local memory=$(systemctl show "${SERVICE_NAME}" -p MemoryCurrent --value)
    if [ "${memory}" != "[not set]" ] && [ "${memory}" != "0" ]; then
        local memory_mb=$((memory / 1024 / 1024))
        local limit_mb=$(echo "{{ memory_limit }}" | sed 's/[^0-9]//g')
        local limit_unit=$(echo "{{ memory_limit }}" | sed 's/[0-9]//g')

        if [ "${limit_unit}" = "G" ]; then
            limit_mb=$((limit_mb * 1024))
        fi

        local usage_pct=$((memory_mb * 100 / limit_mb))

        if [ ${usage_pct} -gt 90 ]; then
            echo -e "${RED}✗ Memory usage: ${memory_mb}MB / ${limit_mb}MB (${usage_pct}%)${NC}"
            return 1
        elif [ ${usage_pct} -gt 75 ]; then
            echo -e "${YELLOW}⚠ Memory usage: ${memory_mb}MB / ${limit_mb}MB (${usage_pct}%)${NC}"
            return 1
        else
            echo -e "${GREEN}✓ Memory usage: ${memory_mb}MB / ${limit_mb}MB (${usage_pct}%)${NC}"
            return 0
        fi
    else
        echo -e "${GREEN}✓ Memory usage: Not available${NC}"
        return 0
    fi
    {% else %}
    echo -e "${GREEN}✓ Memory limits not configured${NC}"
    return 0
    {% endif %}
}

# Check for recent errors in logs
check_errors() {
    local error_count=$(journalctl -u "${SERVICE_NAME}" --since "5 minutes ago" -p err --no-pager | grep -c . || true)
    if [ ${error_count} -gt 0 ]; then
        echo -e "${YELLOW}⚠ ${error_count} errors in last 5 minutes${NC}"
        return 1
    else
        echo -e "${GREEN}✓ No recent errors${NC}"
        return 0
    fi
}

# Main health check
main() {
    echo "==> Health Check: ${SERVICE_NAME}"
    echo ""

    local status=0

    check_running || status=$?
    check_enabled || true  # Don't fail on this
    check_failed || status=$?
    check_restarts || status=$?
    check_memory || status=$?
    check_errors || status=$?

    echo ""

    if [ ${status} -eq 0 ]; then
        echo -e "${GREEN}==> Overall Status: HEALTHY${NC}"
        exit ${EXIT_OK}
    else
        echo -e "${YELLOW}==> Overall Status: WARNING${NC}"
        echo ""
        echo "Run for details: systemctl status ${SERVICE_NAME}"
        echo "View logs: journalctl -u ${SERVICE_NAME} -n 50"
        exit ${EXIT_WARNING}
    fi
}

# Run health check
main
{% endif %}
