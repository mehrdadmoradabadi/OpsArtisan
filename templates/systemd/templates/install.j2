#!/bin/bash
#
# Installation script for {{ service_name }} service
{% if configuration_mode == 'simple' %}
# Configuration: Simple
{% else %}
# Configuration: Advanced
{% endif %}
# Generated by OpsArtisan
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SERVICE_NAME="{{ service_name }}"
SERVICE_FILE="${SERVICE_NAME}.service"
{% if create_timer and configuration_mode == 'advanced' %}
TIMER_FILE="${SERVICE_NAME}.timer"
{% endif %}
{% if enable_socket_activation and configuration_mode == 'advanced' %}
SOCKET_FILE="${SERVICE_NAME}.socket"
{% endif %}
SYSTEMD_DIR="/etc/systemd/system"
USER="{{ run_as_user }}"
{% if configuration_mode == 'advanced' and run_as_group %}
GROUP="{{ run_as_group }}"
{% else %}
GROUP="{{ run_as_user }}"
{% endif %}
WORKING_DIR="{{ working_directory }}"

echo -e "${BLUE}==> Installing {{ service_name }} systemd service${NC}"
echo ""

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}ERROR: This script must be run as root${NC}"
    exit 1
fi

# Check if systemd is available
if ! command -v systemctl &> /dev/null; then
    echo -e "${RED}ERROR: systemd is not available on this system${NC}"
    exit 1
fi

# Check if service file exists
if [ ! -f "${SERVICE_FILE}" ]; then
    echo -e "${RED}ERROR: Service file ${SERVICE_FILE} not found${NC}"
    exit 1
fi

# Create user if doesn't exist
echo "==> Checking user: ${USER}"
if ! id "${USER}" &>/dev/null; then
    echo "Creating user: ${USER}"
    useradd --system --no-create-home --shell /bin/false "${USER}"
    echo -e "${GREEN}✓ User created${NC}"
else
    echo -e "${GREEN}✓ User exists${NC}"
fi

# Create working directory
echo "==> Setting up working directory: ${WORKING_DIR}"
if [ ! -d "${WORKING_DIR}" ]; then
    mkdir -p "${WORKING_DIR}"
    echo -e "${GREEN}✓ Directory created${NC}"
else
    echo -e "${GREEN}✓ Directory exists${NC}"
fi

# Set ownership
chown -R "${USER}:${GROUP}" "${WORKING_DIR}"
echo -e "${GREEN}✓ Ownership set${NC}"

{% if environment_file and configuration_mode == 'advanced' %}
# Create environment file if specified
ENV_FILE="{{ environment_file }}"
if [ ! -f "${ENV_FILE}" ]; then
    echo "==> Creating environment file: ${ENV_FILE}"
    mkdir -p "$(dirname "${ENV_FILE}")"
    cat > "${ENV_FILE}" << 'EOF'
# Environment variables for {{ service_name }}
# Add your variables here in KEY=VALUE format
{% if environment_vars %}
{% for env in environment_vars.split(',') %}
{{ env.strip() }}
{% endfor %}
{% endif %}
EOF
    chmod 640 "${ENV_FILE}"
    chown root:${GROUP} "${ENV_FILE}"
    echo -e "${GREEN}✓ Environment file created${NC}"
    echo -e "${YELLOW}  Edit ${ENV_FILE} to configure environment${NC}"
fi
{% endif %}

# Copy service file
echo "==> Installing service file"
cp "${SERVICE_FILE}" "${SYSTEMD_DIR}/${SERVICE_FILE}"
chmod 644 "${SYSTEMD_DIR}/${SERVICE_FILE}"
echo -e "${GREEN}✓ Service file installed${NC}"

{% if create_timer and configuration_mode == 'advanced' %}
# Copy timer file
if [ -f "${TIMER_FILE}" ]; then
    echo "==> Installing timer file"
    cp "${TIMER_FILE}" "${SYSTEMD_DIR}/${TIMER_FILE}"
    chmod 644 "${SYSTEMD_DIR}/${TIMER_FILE}"
    echo -e "${GREEN}✓ Timer file installed${NC}"
fi
{% endif %}

{% if enable_socket_activation and configuration_mode == 'advanced' %}
# Copy socket file
if [ -f "${SOCKET_FILE}" ]; then
    echo "==> Installing socket file"
    cp "${SOCKET_FILE}" "${SYSTEMD_DIR}/${SOCKET_FILE}"
    chmod 644 "${SYSTEMD_DIR}/${SOCKET_FILE}"
    echo -e "${GREEN}✓ Socket file installed${NC}"
fi
{% endif %}

# Reload systemd
echo "==> Reloading systemd daemon"
systemctl daemon-reload
echo -e "${GREEN}✓ Systemd reloaded${NC}"

# Validate service
echo "==> Validating service configuration"
if systemctl status "${SERVICE_NAME}" &>/dev/null || true; then
    echo -e "${GREEN}✓ Service configuration valid${NC}"
fi

echo ""
echo -e "${GREEN}==> Installation complete!${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
{% if create_timer and configuration_mode == 'advanced' %}
echo "  1. Enable timer: sudo systemctl enable ${SERVICE_NAME}.timer"
echo "  2. Start timer: sudo systemctl start ${SERVICE_NAME}.timer"
echo "  3. Check status: sudo systemctl status ${SERVICE_NAME}.timer"
echo "  4. View logs: sudo journalctl -u ${SERVICE_NAME} -f"
{% elif enable_socket_activation and configuration_mode == 'advanced' %}
echo "  1. Enable socket: sudo systemctl enable ${SERVICE_NAME}.socket"
echo "  2. Start socket: sudo systemctl start ${SERVICE_NAME}.socket"
echo "  3. Check status: sudo systemctl status ${SERVICE_NAME}.socket"
echo "  4. Test connection: telnet localhost {{ socket_port }}"
{% else %}
echo "  1. Enable service: sudo systemctl enable ${SERVICE_NAME}"
echo "  2. Start service: sudo systemctl start ${SERVICE_NAME}"
echo "  3. Check status: sudo systemctl status ${SERVICE_NAME}"
echo "  4. View logs: sudo journalctl -u ${SERVICE_NAME} -f"
{% endif %}
echo ""
echo "Use scripts/manage.sh for easy management"
