{% if firewall_type == 'ufw' %}
# UFW Firewall Rules
# Generated by OpsArtisan
# Configuration: {% if configuration_mode == 'simple' %}Simple{% else %}Advanced{% endif %}

# Reset UFW to defaults
ufw --force reset

# Default policies
ufw default {{ default_policy }} incoming
ufw default allow outgoing
ufw default {{ default_policy }} routed

{% if enable_ipv6 and configuration_mode == 'advanced' %}
# Enable IPv6
sed -i 's/IPV6=.*/IPV6=yes/' /etc/default/ufw
{% endif %}

{% if enable_logging %}
# Enable logging
ufw logging {{ log_level if configuration_mode == 'advanced' else 'on' }}
{% endif %}

{% if allow_loopback and configuration_mode == 'advanced' %}
# Allow loopback
ufw allow in on lo
ufw allow out on lo
{% endif %}

{% if allow_established and configuration_mode == 'advanced' %}
# Allow established connections (handled by default)
{% endif %}

{% if trusted_networks and configuration_mode == 'advanced' %}
# Trusted networks - allow all
{% for network in trusted_networks.split(',') %}
ufw allow from {{ network.strip() }}
{% endfor %}
{% endif %}

{% if blocked_ips and configuration_mode == 'advanced' %}
# Block specific IPs
{% for ip in blocked_ips.split(',') %}
ufw deny from {{ ip.strip() }}
{% endfor %}
{% endif %}

{% if allow_ssh %}
# SSH Access
{% if ssh_source_ips and configuration_mode == 'advanced' %}
# SSH from specific IPs only
{% for ip in ssh_source_ips.split(',') %}
{% if ssh_rate_limit %}
ufw limit from {{ ip.strip() }} to any port {{ ssh_port }} proto tcp
{% else %}
ufw allow from {{ ip.strip() }} to any port {{ ssh_port }} proto tcp
{% endif %}
{% endfor %}
{% else %}
# SSH from anywhere
{% if ssh_rate_limit and configuration_mode == 'advanced' %}
ufw limit {{ ssh_port }}/tcp comment 'SSH with rate limiting'
{% else %}
ufw allow {{ ssh_port }}/tcp comment 'SSH'
{% endif %}
{% endif %}
{% endif %}

{% if server_role == 'web' %}
# Web Server Ports
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'
{% elif server_role == 'database' %}
# Database Ports
ufw allow 3306/tcp comment 'MySQL/MariaDB'
ufw allow 5432/tcp comment 'PostgreSQL'
{% elif server_role == 'api' %}
# API Server Ports
ufw allow 8080/tcp comment 'API HTTP'
ufw allow 8443/tcp comment 'API HTTPS'
{% elif server_role == 'mailserver' %}
# Mail Server Ports
ufw allow 25/tcp comment 'SMTP'
ufw allow 587/tcp comment 'SMTP Submission'
ufw allow 465/tcp comment 'SMTPS'
ufw allow 993/tcp comment 'IMAPS'
ufw allow 995/tcp comment 'POP3S'
{% elif server_role == 'dns' %}
# DNS Server Ports
ufw allow 53/tcp comment 'DNS TCP'
ufw allow 53/udp comment 'DNS UDP'
{% elif server_role == 'vpn' %}
# VPN Server Ports
ufw allow 1194/udp comment 'OpenVPN'
ufw allow 500/udp comment 'IPSec IKE'
ufw allow 4500/udp comment 'IPSec NAT-T'
{% endif %}

{% if allowed_tcp_ports %}
# Custom TCP Ports
{% for port in allowed_tcp_ports.split(',') %}
{% if port.strip() and port.strip() not in ['22', ssh_port|string] %}
ufw allow {{ port.strip() }}/tcp
{% endif %}
{% endfor %}
{% endif %}

{% if allowed_udp_ports and configuration_mode == 'advanced' %}
# Custom UDP Ports
{% for port in allowed_udp_ports.split(',') %}
{% if port.strip() %}
ufw allow {{ port.strip() }}/udp
{% endif %}
{% endfor %}
{% endif %}

{% if docker_integration and configuration_mode == 'advanced' %}
# Docker Integration
# Allow Docker container traffic
ufw allow from {{ docker_network }}
{% endif %}

# Enable UFW
ufw --force enable

{% elif firewall_type == 'iptables' %}
# iptables Firewall Rules
# Generated by OpsArtisan
# Configuration: {% if configuration_mode == 'simple' %}Simple{% else %}Advanced{% endif %}

*filter
# Default policies
:INPUT {{ default_policy|upper }} [0:0]
:FORWARD {{ default_policy|upper }} [0:0]
:OUTPUT ACCEPT [0:0]

{% if configuration_mode == 'advanced' %}
# Create custom chains
:LOGGING - [0:0]
{% if port_scan_protection %}
:PORTSCAN - [0:0]
{% endif %}
{% if rate_limiting %}
:RATELIMIT - [0:0]
{% endif %}
{% endif %}

{% if allow_loopback and configuration_mode == 'advanced' %}
# Allow loopback
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
{% endif %}

{% if allow_established and configuration_mode == 'advanced' %}
# Allow established and related connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}

{% if block_invalid and configuration_mode == 'advanced' %}
# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP
{% endif %}

{% if syn_flood_protection and configuration_mode == 'advanced' %}
# SYN flood protection
-A INPUT -p tcp --syn -m limit --limit 1/s --limit-burst 3 -j ACCEPT
-A INPUT -p tcp --syn -j DROP
{% endif %}

{% if allow_ping and configuration_mode == 'advanced' %}
# Allow ICMP ping
{% if rate_limit_ping %}
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 2 -j ACCEPT
{% else %}
-A INPUT -p icmp --icmp-type echo-request -j ACCEPT
{% endif %}
{% endif %}

{% if blocked_ips and configuration_mode == 'advanced' %}
# Block specific IPs
{% for ip in blocked_ips.split(',') %}
-A INPUT -s {{ ip.strip() }} -j DROP
{% endfor %}
{% endif %}

{% if trusted_networks and configuration_mode == 'advanced' %}
# Trusted networks
{% for network in trusted_networks.split(',') %}
-A INPUT -s {{ network.strip() }} -j ACCEPT
{% endfor %}
{% endif %}

{% if allow_ssh %}
# SSH Access
{% if ssh_source_ips and configuration_mode == 'advanced' %}
{% for ip in ssh_source_ips.split(',') %}
{% if ssh_rate_limit %}
-A INPUT -p tcp -s {{ ip.strip() }} --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --set --name SSH
-A INPUT -p tcp -s {{ ip.strip() }} --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 4 --name SSH -j DROP
{% endif %}
-A INPUT -p tcp -s {{ ip.strip() }} --dport {{ ssh_port }} -m conntrack --ctstate NEW -j ACCEPT
{% endfor %}
{% else %}
{% if ssh_rate_limit and configuration_mode == 'advanced' %}
-A INPUT -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --set --name SSH
-A INPUT -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 4 --name SSH -j DROP
{% endif %}
-A INPUT -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -j ACCEPT
{% endif %}
{% endif %}

{% if server_role == 'web' %}
# Web Server
-A INPUT -p tcp --dport 80 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p tcp --dport 443 -m conntrack --ctstate NEW -j ACCEPT
{% elif server_role == 'database' %}
# Database Server
-A INPUT -p tcp --dport 3306 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p tcp --dport 5432 -m conntrack --ctstate NEW -j ACCEPT
{% elif server_role == 'api' %}
# API Server
-A INPUT -p tcp --dport 8080 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p tcp --dport 8443 -m conntrack --ctstate NEW -j ACCEPT
{% elif server_role == 'mailserver' %}
# Mail Server
-A INPUT -p tcp -m multiport --dports 25,587,465,993,995 -m conntrack --ctstate NEW -j ACCEPT
{% elif server_role == 'dns' %}
# DNS Server
-A INPUT -p tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p udp --dport 53 -j ACCEPT
{% elif server_role == 'vpn' %}
# VPN Server
-A INPUT -p udp --dport 1194 -j ACCEPT
-A INPUT -p udp --dport 500 -j ACCEPT
-A INPUT -p udp --dport 4500 -j ACCEPT
{% endif %}

{% if allowed_tcp_ports %}
# Custom TCP Ports
{% for port in allowed_tcp_ports.split(',') %}
{% if port.strip() and port.strip() not in ['22', ssh_port|string] %}
-A INPUT -p tcp --dport {{ port.strip() }} -m conntrack --ctstate NEW -j ACCEPT
{% endif %}
{% endfor %}
{% endif %}

{% if allowed_udp_ports and configuration_mode == 'advanced' %}
# Custom UDP Ports
{% for port in allowed_udp_ports.split(',') %}
{% if port.strip() %}
-A INPUT -p udp --dport {{ port.strip() }} -j ACCEPT
{% endif %}
{% endfor %}
{% endif %}

{% if enable_logging %}
# Logging
{% if configuration_mode == 'advanced' %}
-A INPUT -j LOGGING
-A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables-Dropped: " --log-level {{ '4' if log_level == 'low' else '6' if log_level == 'medium' else '7' }}
-A LOGGING -j DROP
{% else %}
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "IPTables-Dropped: " --log-level 4
{% endif %}
{% endif %}

COMMIT

{% elif firewall_type == 'nftables' %}
#!/usr/sbin/nft -f
# nftables Firewall Rules
# Generated by OpsArtisan
# Configuration: {% if configuration_mode == 'simple' %}Simple{% else %}Advanced{% endif %}

# Flush all rules
flush ruleset

# IPv4 table
table ip filter {
    {% if rate_limiting and configuration_mode == 'advanced' %}
    # Rate limiting set
    set ratelimit {
        type ipv4_addr
        flags dynamic
    }
    {% endif %}

    {% if blocked_ips and configuration_mode == 'advanced' %}
    # Blocked IPs
    set blocklist {
        type ipv4_addr
        elements = { {% for ip in blocked_ips.split(',') %}{{ ip.strip() }}{% if not loop.last %}, {% endif %}{% endfor %} }
    }
    {% endif %}

    chain input {
        type filter hook input priority 0; policy {{ default_policy }};

        {% if allow_loopback and configuration_mode == 'advanced' %}
        # Allow loopback
        iif lo accept
        {% endif %}

        {% if allow_established and configuration_mode == 'advanced' %}
        # Allow established/related
        ct state established,related accept
        {% endif %}

        {% if block_invalid and configuration_mode == 'advanced' %}
        # Drop invalid
        ct state invalid drop
        {% endif %}

        {% if blocked_ips and configuration_mode == 'advanced' %}
        # Block specific IPs
        ip saddr @blocklist drop
        {% endif %}

        {% if trusted_networks and configuration_mode == 'advanced' %}
        # Trusted networks
        {% for network in trusted_networks.split(',') %}
        ip saddr {{ network.strip() }} accept
        {% endfor %}
        {% endif %}

        {% if allow_ping and configuration_mode == 'advanced' %}
        # Allow ICMP ping
        {% if rate_limit_ping %}
        icmp type echo-request limit rate 1/second accept
        {% else %}
        icmp type echo-request accept
        {% endif %}
        {% endif %}

        {% if allow_ssh %}
        # SSH Access
        {% if ssh_rate_limit and configuration_mode == 'advanced' %}
        tcp dport {{ ssh_port }} ct state new limit rate 4/minute accept
        {% else %}
        tcp dport {{ ssh_port }} ct state new accept
        {% endif %}
        {% endif %}

        {% if server_role == 'web' %}
        # Web Server
        tcp dport { 80, 443 } ct state new accept
        {% elif server_role == 'database' %}
        # Database Server
        tcp dport { 3306, 5432 } ct state new accept
        {% elif server_role == 'api' %}
        # API Server
        tcp dport { 8080, 8443 } ct state new accept
        {% elif server_role == 'mailserver' %}
        # Mail Server
        tcp dport { 25, 587, 465, 993, 995 } ct state new accept
        {% elif server_role == 'dns' %}
        # DNS Server
        tcp dport 53 ct state new accept
        udp dport 53 accept
        {% elif server_role == 'vpn' %}
        # VPN Server
        udp dport { 1194, 500, 4500 } accept
        {% endif %}

        {% if allowed_tcp_ports %}
        # Custom TCP Ports
        tcp dport { {% for port in allowed_tcp_ports.split(',') %}{% if port.strip() and port.strip() not in ['22', ssh_port|string] %}{{ port.strip() }}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %} } ct state new accept
        {% endif %}

        {% if allowed_udp_ports and configuration_mode == 'advanced' %}
        # Custom UDP Ports
        udp dport { {% for port in allowed_udp_ports.split(',') %}{% if port.strip() %}{{ port.strip() }}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %} } accept
        {% endif %}

        {% if enable_logging %}
        # Logging
        limit rate 5/minute log prefix "nftables-dropped: "
        {% endif %}
    }

    chain forward {
        type filter hook forward priority 0; policy {{ default_policy }};
    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

{% if enable_ipv6 and configuration_mode == 'advanced' %}
# IPv6 table (same rules as IPv4)
table ip6 filter {
    chain input {
        type filter hook input priority 0; policy {{ default_policy }};

        iif lo accept
        ct state established,related accept
        ct state invalid drop

        {% if allow_ping %}
        icmpv6 type { echo-request, nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept
        {% endif %}

        {% if allow_ssh %}
        tcp dport {{ ssh_port }} ct state new accept
        {% endif %}

        {% if server_role == 'web' %}
        tcp dport { 80, 443 } ct state new accept
        {% endif %}
    }

    chain forward {
        type filter hook forward priority 0; policy {{ default_policy }};
    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}
{% endif %}
{% endif %}
