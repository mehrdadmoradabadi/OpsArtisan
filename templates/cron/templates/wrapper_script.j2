#!/usr/bin/env bash
#
# {{ job_name }} wrapper script
# Provides error handling, locking, and monitoring
#

set -euo pipefail

# Configuration
JOB_NAME="{{ job_name }}"
LOCK_FILE="/var/run/${JOB_NAME}.lock"
{% if logging_enabled %}
LOG_FILE="{{ log_path }}"
{% endif %}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JOB_SCRIPT="${SCRIPT_DIR}/{{ job_name }}.sh"
{% if timeout %}
TIMEOUT={{ timeout }}
{% endif %}

# Ensure log directory exists
{% if logging_enabled %}
mkdir -p "$(dirname "${LOG_FILE}")"
{% endif %}

# Logging
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[${timestamp}] $*"
{% if logging_enabled %}
    echo "[${timestamp}] $*" >> "${LOG_FILE}"
{% endif %}
}

# Lock handling (prevent concurrent runs)
acquire_lock() {
    if [ -f "${LOCK_FILE}" ]; then
        local pid=$(cat "${LOCK_FILE}")
        if kill -0 "${pid}" 2>/dev/null; then
            log "ERROR: Job already running (PID: ${pid})"
            exit 1
        else
            log "WARN: Stale lock file found, removing"
            rm -f "${LOCK_FILE}"
        fi
    fi
    echo $$ > "${LOCK_FILE}"
}

release_lock() {
    rm -f "${LOCK_FILE}"
}

# Cleanup on exit
cleanup() {
    local exit_code=$?
    release_lock
    if [ ${exit_code} -eq 0 ]; then
        log "INFO: Job completed successfully"
    else
        log "ERROR: Job failed with exit code ${exit_code}"
{% if error_notification and schedule_type == 'cron' %}
        echo "Job ${JOB_NAME} failed with exit code ${exit_code}" | \
            mail -s "Job Failed: ${JOB_NAME}" {{ notification_email }}
{% endif %}
    fi
    exit ${exit_code}
}

trap cleanup EXIT INT TERM

# Main execution
main() {
    log "INFO: Starting job wrapper for ${JOB_NAME}"

    acquire_lock

    local start_time=$(date +%s)

    # Run the job with timeout if specified
{% if timeout %}
    if timeout ${TIMEOUT} bash "${JOB_SCRIPT}"; then
        local status=0
    else
        local status=$?
        if [ ${status} -eq 124 ]; then
            log "ERROR: Job timed out after ${TIMEOUT} seconds"
        fi
    fi
{% else %}
    bash "${JOB_SCRIPT}"
    local status=$?
{% endif %}

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    log "INFO: Job duration: ${duration} seconds"

    return ${status}
}

main "$@"
