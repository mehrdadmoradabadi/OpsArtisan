#!/bin/bash
#
# Certificate generation script
{% if configuration_mode == 'simple' %}
# Configuration: Simple
{% else %}
# Configuration: Advanced
{% endif %}
# Generated by OpsArtisan
#

set -euo pipefail

# Variables
CN="{{ common_name }}"
COUNTRY="{{ country }}"
{% if configuration_mode == 'advanced' %}
STATE="{{ state }}"
LOCALITY="{{ locality }}"
ORG="{{ organization }}"
OU="{{ organizational_unit }}"
EMAIL="{{ email }}"
OUTPUT_DIR="{{ output_directory }}"
{% else %}
ORG="{{ organization }}"
OUTPUT_DIR="./certs"
{% endif %}
CERT_TYPE="{{ cert_type }}"
KEY_SIZE={{ key_size }}
{% if configuration_mode == 'advanced' %}
KEY_ALGO="{{ key_algorithm }}"
HASH_ALGO="{{ hash_algorithm }}"
{% else %}
KEY_ALGO="rsa"
HASH_ALGO="sha256"
{% endif %}
{% if cert_type != 'csr' %}
DAYS_VALID={{ days_valid }}
{% endif %}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}==> OpenSSL Certificate Generator${NC}"
echo ""

# Check if OpenSSL is installed
if ! command -v openssl &> /dev/null; then
    echo -e "${RED}ERROR: OpenSSL is not installed${NC}"
    exit 1
fi

# Create output directory
mkdir -p "${OUTPUT_DIR}"
cd "${OUTPUT_DIR}"

echo "==> Configuration"
echo "    Certificate Type: ${CERT_TYPE}"
echo "    Common Name: ${CN}"
echo "    Key Algorithm: ${KEY_ALGO}"
{% if key_algorithm == 'rsa' or configuration_mode == 'simple' %}
echo "    Key Size: ${KEY_SIZE} bits"
{% else %}
echo "    EC Curve: {{ ec_curve }}"
{% endif %}
echo "    Hash Algorithm: ${HASH_ALGO}"
{% if cert_type != 'csr' %}
echo "    Validity: ${DAYS_VALID} days"
{% endif %}
echo ""

# Build subject string
{% if configuration_mode == 'advanced' %}
SUBJECT="/C=${COUNTRY}/ST=${STATE}/L=${LOCALITY}/O=${ORG}/OU=${OU}/CN=${CN}/emailAddress=${EMAIL}"
{% else %}
SUBJECT="/C=${COUNTRY}/O=${ORG}/CN=${CN}"
{% endif %}

{% if key_algorithm == 'ec' and configuration_mode == 'advanced' %}
# Generate EC private key
echo "==> Generating EC private key ({{ ec_curve }})"
{% if key_encryption %}
openssl ecparam -name {{ ec_curve }} -genkey | openssl ec -aes256 -out "${CN}.key"
{% else %}
openssl ecparam -name {{ ec_curve }} -genkey -out "${CN}.key"
{% endif %}
{% else %}
# Generate RSA private key
echo "==> Generating RSA private key (${KEY_SIZE} bits)"
{% if key_encryption and configuration_mode == 'advanced' %}
openssl genrsa -aes256 -out "${CN}.key" ${KEY_SIZE}
{% else %}
openssl genrsa -out "${CN}.key" ${KEY_SIZE}
{% endif %}
{% endif %}

if [ $? -eq 0 ]; then
    echo -e "${GREEN}âœ" Private key generated: ${CN}.key${NC}"
    chmod 600 "${CN}.key"
else
    echo -e "${RED}ERROR: Failed to generate private key${NC}"
    exit 1
fi

{% if include_san or cert_type == 'ca' %}
# Use OpenSSL config file for SAN or CA extensions
CONFIG_FILE="../configs/openssl.cnf"
{% endif %}

{% if cert_type == 'csr' %}
# Generate Certificate Signing Request (CSR)
echo ""
echo "==> Generating Certificate Signing Request (CSR)"
{% if include_san %}
openssl req -new -${HASH_ALGO} -key "${CN}.key" -out "${CN}.csr" \
    -subj "${SUBJECT}" \
    -config "${CONFIG_FILE}"
{% else %}
openssl req -new -${HASH_ALGO} -key "${CN}.key" -out "${CN}.csr" \
    -subj "${SUBJECT}"
{% endif %}

if [ $? -eq 0 ]; then
    echo -e "${GREEN}âœ" CSR generated: ${CN}.csr${NC}"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "  1. Submit ${CN}.csr to your Certificate Authority"
    echo "  2. Receive signed certificate from CA"
    echo "  3. Install certificate on your server"
else
    echo -e "${RED}ERROR: Failed to generate CSR${NC}"
    exit 1
fi

{% elif cert_type == 'ca' %}
# Generate Certificate Authority certificate
echo ""
echo "==> Generating Certificate Authority (CA) certificate"
{% if configuration_mode == 'advanced' and ca_mode %}
openssl req -new -x509 -${HASH_ALGO} -key "${CN}.key" -out "${CN}.crt" \
    -days ${DAYS_VALID} \
    -subj "${SUBJECT}" \
    -config "${CONFIG_FILE}" \
    -extensions v3_ca
{% else %}
openssl req -new -x509 -${HASH_ALGO} -key "${CN}.key" -out "${CN}.crt" \
    -days ${DAYS_VALID} \
    -subj "${SUBJECT}"
{% endif %}

if [ $? -eq 0 ]; then
    echo -e "${GREEN}âœ" CA certificate generated: ${CN}.crt${NC}"
    echo ""
    echo -e "${YELLOW}CA Setup:${NC}"
    echo "  - This certificate can sign other certificates"
    echo "  - Keep ${CN}.key extremely secure"
    echo "  - Distribute ${CN}.crt to clients as trusted CA"
else
    echo -e "${RED}ERROR: Failed to generate CA certificate${NC}"
    exit 1
fi

{% else %}
# Generate self-signed certificate
echo ""
echo "==> Generating self-signed certificate"
{% if include_san %}
openssl req -new -x509 -${HASH_ALGO} -key "${CN}.key" -out "${CN}.crt" \
    -days ${DAYS_VALID} \
    -subj "${SUBJECT}" \
    -config "${CONFIG_FILE}" \
    -extensions v3_req
{% else %}
openssl req -new -x509 -${HASH_ALGO} -key "${CN}.key" -out "${CN}.crt" \
    -days ${DAYS_VALID} \
    -subj "${SUBJECT}"
{% endif %}

if [ $? -eq 0 ]; then
    echo -e "${GREEN}âœ" Self-signed certificate generated: ${CN}.crt${NC}"
else
    echo -e "${RED}ERROR: Failed to generate certificate${NC}"
    exit 1
fi
{% endif %}

{% if configuration_mode == 'advanced' and output_formats != 'pem' %}
# Convert to additional formats
echo ""
echo "==> Converting to additional formats"
{% if output_formats in ['der', 'all'] %}
# Convert to DER format
openssl x509 -in "${CN}.crt" -outform DER -out "${CN}.der"
echo -e "${GREEN}âœ" DER format: ${CN}.der${NC}"
{% endif %}

{% if output_formats in ['pkcs12', 'all'] and cert_type != 'csr' %}
# Convert to PKCS12 format
echo ""
echo "Creating PKCS12 bundle (will prompt for export password)"
openssl pkcs12 -export -in "${CN}.crt" -inkey "${CN}.key" \
    -out "${CN}.p12" -name "${CN}"
echo -e "${GREEN}âœ" PKCS12 bundle: ${CN}.p12${NC}"
{% endif %}
{% endif %}

# Summary
echo ""
echo -e "${GREEN}==> Certificate generation complete!${NC}"
echo ""
echo "Generated files in ${OUTPUT_DIR}:"
echo "  - ${CN}.key (private key) - KEEP SECURE!"
{% if cert_type == 'csr' %}
echo "  - ${CN}.csr (certificate signing request)"
{% else %}
echo "  - ${CN}.crt (certificate)"
{% endif %}
{% if configuration_mode == 'advanced' %}
{% if output_formats in ['der', 'all'] %}
echo "  - ${CN}.der (DER format)"
{% endif %}
{% if output_formats in ['pkcs12', 'all'] and cert_type != 'csr' %}
echo "  - ${CN}.p12 (PKCS12 bundle)"
{% endif %}
{% endif %}
echo ""

{% if cert_type != 'csr' %}
echo -e "${YELLOW}Verification:${NC}"
echo "  bash scripts/verify-cert.sh"
echo ""
{% endif %}

echo -e "${YELLOW}Security reminders:${NC}"
echo "  âš ï¸ Protect private key: chmod 600 ${CN}.key"
echo "  âš ï¸ Never commit private keys to version control"
echo "  âš ï¸ Store keys in secure, backed-up location"
{% if cert_type == 'selfsigned' %}
echo "  âš ï¸ Self-signed certs are for testing only"
echo "  âš ï¸ Use Let's Encrypt or commercial CA for production"
{% endif %}
echo ""

echo "For deployment help, see README.md"