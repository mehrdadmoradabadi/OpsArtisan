#!/bin/bash
#
# Terraform initialization script
# Generated by OpsArtisan
#

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}==> Terraform Initialization${NC}"
echo "Project: {{ project_name }}"
echo "Environment: {{ environment }}"
echo ""

# Check if Terraform is installed
if ! command -v terraform &> /dev/null; then
    echo -e "${YELLOW}Terraform not found. Please install Terraform first.${NC}"
    exit 1
fi

echo "Terraform version:"
terraform version
echo ""

{% if enable_remote_state and configuration_mode == 'advanced' %}
# Create state backend resources if needed
{% if state_backend == 's3' %}
echo -e "${BLUE}==> Checking S3 backend${NC}"

# Check if bucket exists
if ! aws s3 ls "s3://{{ state_bucket }}" 2>/dev/null; then
    echo "Creating S3 bucket for state..."
    aws s3 mb "s3://{{ state_bucket }}" --region {{ region }}
    aws s3api put-bucket-versioning \
        --bucket "{{ state_bucket }}" \
        --versioning-configuration Status=Enabled
    aws s3api put-bucket-encryption \
        --bucket "{{ state_bucket }}" \
        --server-side-encryption-configuration '{
          "Rules": [{
            "ApplyServerSideEncryptionByDefault": {
              "SSEAlgorithm": "AES256"
            }
          }]
        }'
    echo -e "${GREEN}✓ S3 bucket created${NC}"
fi

{% if enable_state_locking %}
# Check if DynamoDB table exists
if ! aws dynamodb describe-table \
    --table-name "{{ project_name }}-terraform-locks" \
    --region {{ region }} &>/dev/null; then
    echo "Creating DynamoDB table for state locking..."
    aws dynamodb create-table \
        --table-name "{{ project_name }}-terraform-locks" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region {{ region }}
    echo -e "${GREEN}✓ DynamoDB table created${NC}"
fi
{% endif %}
{% endif %}
echo ""
{% endif %}

# Initialize Terraform
echo -e "${BLUE}==> Initializing Terraform${NC}"
terraform init {% if enable_remote_state and configuration_mode == 'advanced' %}-reconfigure{% endif %}

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}✓ Terraform initialized successfully${NC}"
    echo ""
    echo "Next steps:"
    echo "  1. Review terraform.tfvars"
    echo "  2. Run: bash scripts/plan.sh"
    echo "  3. Run: bash scripts/apply.sh"
else
    echo -e "${YELLOW}Initialization failed${NC}"
    exit 1
fi
