# Main Terraform configuration
# Project: {{ project_name }}
# Environment: {{ environment }}
# Generated by OpsArtisan

{% if enable_vpc %}
# VPC Configuration
{% if enable_modules and configuration_mode == 'advanced' %}
module "vpc" {
  source = "./modules/vpc"

  project_name = var.project_name
  environment  = var.environment
  vpc_cidr     = var.vpc_cidr
  {% if enable_ha %}
  availability_zones = data.aws_availability_zones.available.names
  {% endif %}

  tags = local.common_tags
}
{% else %}
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-vpc"
    }
  )
}

resource "aws_subnet" "public" {
  {% if enable_ha and configuration_mode == 'advanced' %}
  count = length(data.aws_availability_zones.available.names)

  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index)
  availability_zone = data.aws_availability_zones.available.names[count.index]
  {% else %}
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, 1)
  availability_zone = data.aws_availability_zones.available.names[0]
  {% endif %}
  map_public_ip_on_launch = true

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-public-subnet{% if enable_ha %}-${count.index + 1}{% endif %}"
      Type = "public"
    }
  )
}

resource "aws_subnet" "private" {
  {% if enable_ha and configuration_mode == 'advanced' %}
  count = length(data.aws_availability_zones.available.names)

  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index + 10)
  availability_zone = data.aws_availability_zones.available.names[count.index]
  {% else %}
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, 11)
  availability_zone = data.aws_availability_zones.available.names[0]
  {% endif %}

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-private-subnet{% if enable_ha %}-${count.index + 1}{% endif %}"
      Type = "private"
    }
  )
}

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-igw"
    }
  )
}

{% if enable_nat_gateway and configuration_mode == 'advanced' %}
resource "aws_eip" "nat" {
  {% if enable_ha %}
  count = length(data.aws_availability_zones.available.names)
  {% endif %}
  domain = "vpc"

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-nat-eip{% if enable_ha %}-${count.index + 1}{% endif %}"
    }
  )

  depends_on = [aws_internet_gateway.main]
}

resource "aws_nat_gateway" "main" {
  {% if enable_ha %}
  count = length(data.aws_availability_zones.available.names)

  allocation_id = aws_eip.nat[count.index].id
  subnet_id     = aws_subnet.public[count.index].id
  {% else %}
  allocation_id = aws_eip.nat[0].id
  subnet_id     = aws_subnet.public.id
  {% endif %}

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-nat{% if enable_ha %}-${count.index + 1}{% endif %}"
    }
  )

  depends_on = [aws_internet_gateway.main]
}
{% endif %}

# Route Tables
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-public-rt"
    }
  )
}

resource "aws_route_table_association" "public" {
  {% if enable_ha and configuration_mode == 'advanced' %}
  count = length(aws_subnet.public)

  subnet_id      = aws_subnet.public[count.index].id
  {% else %}
  subnet_id      = aws_subnet.public.id
  {% endif %}
  route_table_id = aws_route_table.public.id
}

{% if enable_nat_gateway and configuration_mode == 'advanced' %}
resource "aws_route_table" "private" {
  {% if enable_ha %}
  count = length(data.aws_availability_zones.available.names)
  {% endif %}
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    {% if enable_ha %}
    nat_gateway_id = aws_nat_gateway.main[count.index].id
    {% else %}
    nat_gateway_id = aws_nat_gateway.main[0].id
    {% endif %}
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-private-rt{% if enable_ha %}-${count.index + 1}{% endif %}"
    }
  )
}

resource "aws_route_table_association" "private" {
  {% if enable_ha %}
  count = length(aws_subnet.private)

  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private[count.index].id
  {% else %}
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private[0].id
  {% endif %}
}
{% endif %}
{% endif %}
{% endif %}

{% if infrastructure_type == 'application' %}
# Security Group for Application
resource "aws_security_group" "app" {
  name_description = "${var.project_name}-${var.environment}-app-sg"
  description      = "Security group for application servers"
  {% if enable_vpc %}
  vpc_id          = {% if enable_modules and configuration_mode == 'advanced' %}module.vpc.vpc_id{% else %}aws_vpc.main.id{% endif %}
  {% endif %}

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS"
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # TODO: Restrict to your IP
    description = "SSH"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound"
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-app-sg"
    }
  )
}

{% if enable_load_balancer %}
# Application Load Balancer
resource "aws_lb" "main" {
  name               = "${var.project_name}-${var.environment}-alb"
  internal           = false
  load_balancer_type = "{{ load_balancer_type }}"
  security_groups    = [aws_security_group.alb.id]
  {% if enable_vpc %}
  {% if enable_ha and configuration_mode == 'advanced' %}
  subnets            = aws_subnet.public[*].id
  {% else %}
  subnets            = [aws_subnet.public.id]
  {% endif %}
  {% endif %}

  enable_deletion_protection = {% if environment == 'prod' %}true{% else %}false{% endif %}
  {% if enable_monitoring and configuration_mode == 'advanced' %}
  enable_http2               = true
  enable_cross_zone_load_balancing = true
  {% endif %}

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-alb"
    }
  )
}

resource "aws_security_group" "alb" {
  name_description = "${var.project_name}-${var.environment}-alb-sg"
  description      = "Security group for ALB"
  {% if enable_vpc %}
  vpc_id          = {% if enable_modules and configuration_mode == 'advanced' %}module.vpc.vpc_id{% else %}aws_vpc.main.id{% endif %}
  {% endif %}

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }

{% if enable_ssl %}
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS"
  }
  {% endif %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound"
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-alb-sg"
    }
  )
}

resource "aws_lb_target_group" "main" {
  name     = "${var.project_name}-${var.environment}-tg"
  port     = 80
  protocol = "HTTP"
  {% if enable_vpc %}
  vpc_id   = {% if enable_modules and configuration_mode == 'advanced' %}module.vpc.vpc_id{% else %}aws_vpc.main.id{% endif %}
  {% endif %}

  health_check {
    enabled             = true
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 5
    interval            = 30
    path                = "/health"
    matcher             = "200"
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-tg"
    }
  )
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.main.arn
  port              = "80"
  protocol          = "HTTP"

  {% if enable_ssl %}
  default_action {
    type = "redirect"
    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
  {% else %}
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.main.arn
  }
  {% endif %}
}

{% if enable_ssl %}
resource "aws_lb_listener" "https" {
  load_balancer_arn = aws_lb.main.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS-1-2-2017-01"
  certificate_arn   = {% if ssl_certificate_arn and configuration_mode == 'advanced' %}var.ssl_certificate_arn{% else %}aws_acm_certificate.main.arn{% endif %}

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.main.arn
  }
}

{% if not ssl_certificate_arn or configuration_mode == 'simple' %}
# Self-signed certificate (replace with ACM in production)
resource "aws_acm_certificate" "main" {
  domain_name       = "${var.project_name}.example.com"
  validation_method = "DNS"

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-cert"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}
{% endif %}
{% endif %}
{% endif %}

{% if enable_autoscaling and configuration_mode == 'advanced' %}
# Launch Template
resource "aws_launch_template" "main" {
  name_prefix   = "${var.project_name}-${var.environment}-"
  image_id      = data.aws_ami.amazon_linux_2.id
  instance_type = var.instance_type

  vpc_security_group_ids = [aws_security_group.app.id]

  {% if enable_monitoring %}
  monitoring {
    enabled = true
  }
  {% endif %}

  {% if enable_encryption %}
  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size           = 20
      volume_type           = "gp3"
      encrypted             = true
      delete_on_termination = true
    }
  }
  {% endif %}

  user_data = base64encode(templatefile("${path.module}/user_data.sh", {
    project_name = var.project_name
    environment  = var.environment
  }))

  tag_specifications {
    resource_type = "instance"
    tags = merge(
      local.common_tags,
      {
        Name = "${var.project_name}-${var.environment}-instance"
      }
    )
  }

  lifecycle {
    create_before_destroy = true
  }
}

# Auto Scaling Group
resource "aws_autoscaling_group" "main" {
  name                = "${var.project_name}-${var.environment}-asg"
  min_size            = var.min_instances
  max_size            = var.max_instances
  desired_capacity    = var.min_instances
  health_check_type   = "ELB"
  health_check_grace_period = 300
  {% if enable_vpc %}
  {% if enable_ha %}
  vpc_zone_identifier = aws_subnet.private[*].id
  {% else %}
  vpc_zone_identifier = [aws_subnet.private.id]
  {% endif %}
  {% endif %}
  {% if enable_load_balancer %}
  target_group_arns   = [aws_lb_target_group.main.arn]
  {% endif %}

  launch_template {
    id      = aws_launch_template.main.id
    version = "$Latest"
  }

  tag {
    key                 = "Name"
    value               = "${var.project_name}-${var.environment}-asg-instance"
    propagate_at_launch = true
  }

  dynamic "tag" {
    for_each = local.common_tags
    content {
      key                 = tag.key
      value               = tag.value
      propagate_at_launch = true
    }
  }
}

# Auto Scaling Policies
resource "aws_autoscaling_policy" "scale_up" {
  name                   = "${var.project_name}-${var.environment}-scale-up"
  scaling_adjustment     = 1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = aws_autoscaling_group.main.name
}

resource "aws_autoscaling_policy" "scale_down" {
  name                   = "${var.project_name}-${var.environment}-scale-down"
  scaling_adjustment     = -1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = aws_autoscaling_group.main.name
}

{% if enable_monitoring %}
# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "high_cpu" {
  alarm_name          = "${var.project_name}-${var.environment}-high-cpu"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = 300
  statistic           = "Average"
  threshold           = 75

  dimensions = {
    AutoScalingGroupName = aws_autoscaling_group.main.name
  }

  alarm_actions = [aws_autoscaling_policy.scale_up.arn]
}

resource "aws_cloudwatch_metric_alarm" "low_cpu" {
  alarm_name          = "${var.project_name}-${var.environment}-low-cpu"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = 300
  statistic           = "Average"
  threshold           = 25

  dimensions = {
    AutoScalingGroupName = aws_autoscaling_group.main.name
  }

  alarm_actions = [aws_autoscaling_policy.scale_down.arn]
}
{% endif %}

{% else %}
# Single EC2 Instance (Simple mode)
resource "aws_instance" "main" {
  ami           = data.aws_ami.amazon_linux_2.id
  instance_type = var.instance_type
  {% if enable_vpc %}
  subnet_id     = {% if enable_ha and configuration_mode == 'advanced' %}aws_subnet.public[0].id{% else %}aws_subnet.public.id{% endif %}
  {% endif %}
  vpc_security_group_ids = [aws_security_group.app.id]

  {% if enable_encryption and configuration_mode == 'advanced' %}
  root_block_device {
    volume_size           = 20
    volume_type           = "gp3"
    encrypted             = true
    delete_on_termination = true
  }
  {% endif %}

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-instance"
    }
  )
}
{% endif %}
{% endif %}

{% if enable_rds %}
# RDS Database
resource "aws_db_subnet_group" "main" {
  name       = "${var.project_name}-${var.environment}-db-subnet"
  {% if enable_vpc %}
  {% if enable_ha and configuration_mode == 'advanced' %}
  subnet_ids = aws_subnet.private[*].id
  {% else %}
  subnet_ids = [aws_subnet.private.id]
  {% endif %}
  {% endif %}

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-db-subnet"
    }
  )
}

resource "aws_security_group" "rds" {
  name_description = "${var.project_name}-${var.environment}-rds-sg"
  description      = "Security group for RDS"
  {% if enable_vpc %}
  vpc_id          = {% if enable_modules and configuration_mode == 'advanced' %}module.vpc.vpc_id{% else %}aws_vpc.main.id{% endif %}
  {% endif %}

  ingress {
    from_port       = {% if rds_engine == 'postgres' %}5432{% else %}3306{% endif %}
    to_port         = {% if rds_engine == 'postgres' %}5432{% else %}3306{% endif %}
    protocol        = "tcp"
    security_groups = [aws_security_group.app.id]
    description     = "Database access from app"
  }

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-rds-sg"
    }
  )
}

resource "aws_db_instance" "main" {
  identifier             = "${var.project_name}-${var.environment}-db"
  engine                 = "{{ rds_engine }}"
  engine_version         = {% if rds_engine == 'postgres' %}"14.7"{% elif rds_engine == 'mysql' %}"8.0"{% else %}"10.6"{% endif %}
  instance_class         = var.rds_instance_class
  allocated_storage      = 20
  storage_type           = "gp3"
  {% if enable_encryption %}
  storage_encrypted      = true
  {% endif %}

  db_name  = replace(var.project_name, "-", "_")
  username = "admin"
  password = random_password.db_password.result

  db_subnet_group_name   = aws_db_subnet_group.main.name
  vpc_security_group_ids = [aws_security_group.rds.id]

  {% if enable_backup and configuration_mode == 'advanced' %}
  backup_retention_period = var.backup_retention_days
  backup_window          = "03:00-04:00"
  maintenance_window     = "mon:04:00-mon:05:00"
  {% endif %}

  {% if enable_ha and configuration_mode == 'advanced' %}
  multi_az = true
  {% endif %}

  skip_final_snapshot = {% if environment == 'prod' %}false{% else %}true{% endif %}
  final_snapshot_identifier = "${var.project_name}-${var.environment}-final-snapshot"

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-db"
    }
  )
}

resource "random_password" "db_password" {
  length  = 32
  special = true
}

resource "aws_secretsmanager_secret" "db_password" {
  name = "${var.project_name}-${var.environment}-db-password"

  tags = local.common_tags
}

resource "aws_secretsmanager_secret_version" "db_password" {
  secret_id     = aws_secretsmanager_secret.db_password.id
  secret_string = random_password.db_password.result
}
{% endif %}

{% if enable_s3 %}
# S3 Buckets
{% for bucket in s3_buckets.split(',') %}
resource "aws_s3_bucket" "{{ bucket.strip() }}" {
  bucket = "${var.project_name}-${var.environment}-{{ bucket.strip() }}"

  tags = merge(
    local.common_tags,
    {
      Name = "${var.project_name}-${var.environment}-{{ bucket.strip() }}"
    }
  )
}

{% if enable_encryption and configuration_mode == 'advanced' %}
resource "aws_s3_bucket_server_side_encryption_configuration" "{{ bucket.strip() }}" {
  bucket = aws_s3_bucket.{{ bucket.strip() }}.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}
{% endif %}

resource "aws_s3_bucket_public_access_block" "{{ bucket.strip() }}" {
  bucket = aws_s3_bucket.{{ bucket.strip() }}.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

{% if enable_backup and configuration_mode == 'advanced' %}
resource "aws_s3_bucket_versioning" "{{ bucket.strip() }}" {
  bucket = aws_s3_bucket.{{ bucket.strip() }}.id

  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "{{ bucket.strip() }}" {
  bucket = aws_s3_bucket.{{ bucket.strip() }}.id

  rule {
    id     = "expire-old-versions"
    status = "Enabled"

    noncurrent_version_expiration {
      noncurrent_days = var.backup_retention_days
    }
  }
}
{% endif %}

{% endfor %}
{% endif %}

# Data Sources
data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_ami" "amazon_linux_2" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}

# Common Tags
locals {
  common_tags = {% if enable_tags and configuration_mode == 'advanced' %}{
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "Terraform"
    CostCenter  = var.cost_center
    Owner       = var.owner_email
  }{% else %}{
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "Terraform"
  }{% endif %}
}
