#!/bin/bash
#
# Terraform destroy script
# Generated by OpsArtisan
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${RED}==> Terraform Destroy${NC}"
echo "Project: {{ project_name }}"
echo "Environment: {{ environment }}"
echo ""

# Strong warning
echo -e "${RED}⚠️  DANGER: This will DESTROY all infrastructure${NC}"
echo -e "${RED}⚠️  This action CANNOT be undone${NC}"
echo ""
echo "Resources that will be destroyed:"
terraform state list
echo ""

# First confirmation
read -p "Type the environment name '{{ environment }}' to confirm: " -r
if [[ $REPLY != "{{ environment }}" ]]; then
    echo "Confirmation failed. Destroy cancelled."
    exit 0
fi

# Second confirmation
echo ""
read -p "Are you absolutely sure? Type 'yes' to destroy: " -r
if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
    echo "Destroy cancelled"
    exit 0
fi

# Create backup of state
echo ""
echo -e "${BLUE}==> Backing up state${NC}"
mkdir -p backups
terraform state pull > "backups/terraform.tfstate.backup.$(date +%Y%m%d_%H%M%S)"
echo -e "${GREEN}✓ State backed up${NC}"

# Destroy
echo ""
echo -e "${RED}==> Destroying infrastructure${NC}"
terraform destroy -auto-approve

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}✓ Infrastructure destroyed${NC}"
else
    echo -e "${RED}Destroy failed${NC}"
    exit 1
fi
